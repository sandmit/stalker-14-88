using System.Linq;
using Content.Client._Stalker.Shop.Ui.SliderTab;
using Content.Client.Actions;
using Content.Client.GameTicking.Managers;
using Content.Client.Message;
using Content.Client.Store.Ui;
using Content.Shared._Stalker.Shop.Prototypes;
using Content.Shared.FixedPoint;
using Content.Shared.Store;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client._Stalker.Shop.Ui;
/// <summary>
/// Stalker shops client control system, uses for UI updates
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class ShopMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    private readonly ClientGameTicker _gameTicker;
    private readonly ActionsSystem _actions;
    private ShopSlider? _shopSlider;

    /// <summary>
    /// Current balance of the shop/user
    /// </summary>
    private int _balance;

    private string _moneyId = string.Empty;
    private string _locMoneyName = string.Empty;
    public event Action<BaseButton.ButtonEventArgs, string>? OnCategoryButtonPressed;
    public event Action<BaseButton.ButtonEventArgs, ListingData, bool, int, int?>? OnListingButtonPressed;
    public event Action? OnRefreshButtonPressed;

    /// <summary>
    /// Current category user chosen, if its null on open, we will take the first one(by priority)
    /// </summary>
    public string? CurrentCategory;
    private const string UserCategory = "UserItems";

    public ShopMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
        _actions = _entityManager.System<ActionsSystem>(); // Need for implants lol
        RefreshButton.OnPressed += _ => OnRefreshButtonPressed?.Invoke();
    }

    #region Updates
    public void UpdateBalance(int balance, string? moneyId, string? locMoneyName)
    {
        _balance = balance;
        _moneyId = moneyId ?? _moneyId;
        _locMoneyName = locMoneyName ?? _locMoneyName;

        // Captialize first letter
        var displayname =
            string.Concat(_locMoneyName[0].ToString().ToUpper(), _locMoneyName.AsSpan(1));

        var balanceStr = Loc.GetString("store-ui-balance-display", ("amount", balance),
            ("currency", displayname));
        BalanceInfo.SetMarkup(balanceStr.TrimEnd());
    }

    public void UpdateListing(List<CategoryInfo> categories, List<ListingData> userItems)
    {
        var listings = new List<ListingData>();
        foreach (var el in categories)
        {
            if (el.Name != CurrentCategory)
                continue;

            listings.AddRange(el.ListingItems);
        }

        if (CurrentCategory == UserCategory)
        {
            listings.AddRange(userItems);
        }

        // Linq, fuck...
        var sorted = listings.OrderBy(l => l.Priority).ThenBy(l => l.OriginalCost.Values.Sum());

        // TODO: should probably chunk these out instead. to-do if this clogs the internet tubes. maybe read clients prototypes instead?
        ClearListings();

        foreach (var item in sorted)
        {
            AddListingGui(item, CurrentCategory == UserCategory);
        }
    }

    private void ClearListings()
    {
        StoreListingsContainer.Children.Clear();
    }
    #endregion

    #region ListingsOperations
    private void AddListingGui(ListingData listing, bool sell = false)
    {
        var listingName = Loc.GetString(listing.Name ?? "");
        var listingDesc = Loc.GetString(listing.Description ?? "");
        var listingPrice = listing.OriginalCost;
        var listingCount = listing.Count; // listing.Count; ST-TODO: I'm not sure that this is correct logic, but I don't want to add the field.
        if (listingPrice is null)
            return;
        var canBuy = !sell ? CanBuyListing(_balance, listingPrice.Values.First()) : sell;

        var spriteSys = _entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();

        Texture? texture = null;
        if (listing.Icon != null)
            texture = spriteSys.Frame0(listing.Icon);

        if (listing.ProductEntity != null)
        {
            texture ??= spriteSys.GetPrototypeIcon(listing.ProductEntity).Default;
            var proto = _prototypeManager.Index<EntityPrototype>(listing.ProductEntity);

            if (listingName == string.Empty)
                listingName = proto.Name;

            if (listingDesc == string.Empty)
                listingDesc = proto.Description;
        }
        else if (listing.ProductAction != null)
        {
            var actionId = _entityManager.Spawn(listing.ProductAction);
            if (_actions.TryGetActionData(actionId, out var action) && action.Icon != null)
                texture = spriteSys.Frame0(action.Icon);
        }

        var listingInStock = ListingInStock(listing);

        var newListing = new ShopListingControl(listingName, listingDesc, listingInStock, canBuy, sell, texture);
        newListing.ShopItemButton.OnButtonDown += (args) =>
        {
            if (!sell)
            {
                OnListingButtonPressed?.Invoke(args, listing, sell, _balance, null);
                newListing.ShopItemButton.Disabled = true;
                return;
            }

            if (listingCount <= 1)
            {
                OnListingButtonPressed?.Invoke(args, listing, sell, _balance, listingCount);
                return;
            }

            if (_shopSlider != null && _shopSlider.IsOpen)
            {
                _shopSlider.MoveToFront();
                return;
            }
            if (!listing.OriginalCost.TryGetValue(_moneyId, out var money))
                return;

            _shopSlider = new ShopSlider(listingCount, money.Int());
            _shopSlider.OpenCentered();

            _shopSlider.ConfirmButtonPressed += () =>
            {
                OnListingButtonPressed?.Invoke(args, listing, sell, _balance, _shopSlider.GetSliderValue());
            };
        };

        StoreListingsContainer.AddChild(newListing);
    }

    private string GetListingPriceString(ListingData listing)
    {
        var text = string.Empty;
        if (listing.OriginalCost.Count < 1)
            return Loc.GetString("store-currency-free").TrimEnd();

        foreach (var (type, amount) in listing.OriginalCost)
        {

            var currency = _prototypeManager.Index<CurrencyPrototype>(type);
            text += Loc.GetString("store-ui-price-display", ("amount", amount),
                ("currency", Loc.GetString(currency.DisplayName, ("amount", amount))));
        }

        return text.TrimEnd();
    }

    /// <summary>
    /// Return time until available or the cost.
    /// </summary>
    private string ListingInStock(ListingData listing)
    {
        var stationTime = _gameTiming.CurTime.Subtract(_gameTicker.RoundStartTimeSpan);

        var restockTimeSpan = listing.RestockTime;
        if (restockTimeSpan <= stationTime)
            return GetListingPriceString(listing);

        var timeLeftToBuy = stationTime - restockTimeSpan;
        return timeLeftToBuy.Duration().ToString(@"mm\:ss");
    }

    private bool CanBuyListing(int balance, FixedPoint2 price)
    {
        return balance >= price;
    }
    #endregion

    #region CategoryControls
    public void PopulateStoreCategoryButtons(List<CategoryInfo> categories, List<ListingData> items)
    {
        var allCategories = categories;

        allCategories = allCategories.OrderBy(c => c.Priority).ToList();

        if (CurrentCategory == null && allCategories.Count > 0)
            CurrentCategory = allCategories.First().Name;

        if (allCategories.Count <= 1)
            return;

        CategoryListContainer.Children.Clear();

        foreach (var category in allCategories)
        {
            var catButton = new ShopCategoryButton
            {
                Text = Loc.GetString(category.Name),
                CategoryInfo = category,
            };

            catButton.OnPressed += args => OnCategoryButtonPressed?.Invoke(args, catButton.CategoryInfo.Name);
            CategoryListContainer.AddChild(catButton);
        }

        // Sell items category
        var youCategory = new ShopCategoryButton
        {
            Text = Loc.GetString("shop-your-items-category"),
            CategoryInfo = new CategoryInfo
            {
                Items = new Dictionary<string, int>(),
                Name = UserCategory
            }
        };

        youCategory.OnPressed += args => OnCategoryButtonPressed?.Invoke(args, youCategory.CategoryInfo.Name);
        CategoryListContainer.AddChild(youCategory);
    }

    private sealed class ShopCategoryButton : Button
    {
        public CategoryInfo? CategoryInfo;
    }
    #endregion
}
